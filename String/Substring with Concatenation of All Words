class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> result = new ArrayList<Integer>();
        if (s == null || s.length() == 0 || words == null || words.length == 0) {
            return result;
        }
        int wordLen = words[0].length();
        int windowLen = wordLen * words.length;
        Map<String, Integer> wordCount = new HashMap<String, Integer>();
        for (String word : words) {
            wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);
        }
        for (int i = 0; i <= s.length() - windowLen; i++) {
            Map<String, Integer> currCount = new HashMap<String, Integer>();
            int j = i;
            while (j < i + windowLen) {
                String word = s.substring(j, j + wordLen);
                if (!wordCount.containsKey(word)) {
                    break;
                }
                currCount.put(word, currCount.getOrDefault(word, 0) + 1);
                if (currCount.get(word) > wordCount.getOrDefault(word, 0)) {
                    break;
                }
                j += wordLen;
            }
            if (j == i + windowLen) {
                result.add(i);
            }
        }
        return result;
    }
}
