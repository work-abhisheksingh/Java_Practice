class Solution {
   public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
    int n = obstacles.length;
    int[] dp = new int[n];
    List<Integer> list = new ArrayList<>();
    for (int i = 0; i < n; i++) {
        int idx = binarySearch(list, obstacles[i]);
        dp[i] = idx + 1;
        if (idx == list.size()) {
            list.add(obstacles[i]);
        } else {
            list.set(idx, obstacles[i]);
        }
    }
    return dp;
}

private int binarySearch(List<Integer> list, int target) {
    int lo = 0, hi = list.size();
    while (lo < hi) {
        int mid = lo + (hi - lo) / 2;
        if (list.get(mid) <= target) {
            lo = mid + 1;
        } else {
            hi = mid;
        }
    }
    return lo;
}

}
